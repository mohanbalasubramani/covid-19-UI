{"version":3,"sources":["reducers/covid.js","constants/actionType/covid.js","reducers/index.js","constants/api/covid.js","actions/chart.js","utilities/data.js","components/Global/Global.js","components/Global/index.js","components/Bar/BarChart.js","components/Bar/index.js","components/ActivityIndicator/ActivityIndicator.js","components/ActivityIndicator/index.js","components/Pie/Pie.js","components/Pie/index.js","components/Search/Search.js","components/Search/index.js","components/Line/Line.js","components/Line/index.js","App.js","serviceWorker.js","index.js"],"names":["INITIAL_STATE","allData","countryInfo","timeLine","reducer","state","action","type","PREFIX","globalRecords","payload","shift","countryRecords","combineReducers","covid","DOMAIN","COVID_COUNTRY_NAME","COVID_TIMELINE_COUNTRY","TIMELINE_DOMAIN_COUNTRY","covidSummary","dispatch","axios","get","then","res","data","catch","err","console","error","covidCountryList","country","API","replace","covidTimeLine","countryCode","timelineitems","topTenCountry","code","cases","Global","className","this","props","globalData","Object","values","map","val","index","key","style","background","Math","random","toString","keys","toLocaleString","PureComponent","connect","BarChart","useState","setData","categories","setCategories","useEffect","myData","categoriess","slice","push","handleConsent","options","chart","title","text","subtitle","xAxis","yAxis","min","align","labels","overflow","plotOptions","bar","dataLabels","enabled","legend","credits","series","colorByPoint","name","highcharts","Highcharts","ActivityIndicator","classes","small","medium","large","join","defaultProps","Pie","contryDetails","bindActionCreators","countryName","option","setSelectedOption","setCountryInfo","active","setActive","handleCountry","forEach","y","tooltip","pointFormat","accessibility","point","valueSuffix","pie","allowPointSelect","cursor","format","htmlFor","id","onChange","e","target","value","defaultValue","Search","setCountry","placeholder","filter","toUpperCase","indexOf","length","deaths","recovered","totalTests","todayDeaths","Line","timeLineRecords","setSeries","pop","date","grouped","groupBy","i","new_daily_cases","new_daily_deaths","total_recoveries","total_deaths","total_cases","list","keyGetter","Map","item","collection","set","rangeDescription","layout","verticalAlign","label","connectorAllowed","responsive","rules","condition","maxWidth","chartOptions","data-value","Date","split","Bar","Boolean","window","location","hostname","match","enhancers","compose","applyMiddleware","ReduxThunk","devToolsExtension","f","store","createStore","reducers","app","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.45a57778.chunk.js","sourcesContent":["import * as Constants from '../constants/actionType/covid'\r\n\r\nconst INITIAL_STATE = {\r\n    allData:null,\r\n    countryInfo: null,\r\n    timeLine: null\r\n};\r\n\r\nconst reducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch( action.type ){\r\n        case Constants.COVID_SUMMARY:\r\n            let globalRecords = action.payload.shift(),\r\n                countryRecords = action.payload;\r\n            return { ...state, globalRecords, countryRecords };\r\n        case Constants.COVID_COUNTRYLIST:\r\n            return {...state, countryInfo: action.payload }\r\n        case Constants.COVID_TIMELINE:\r\n            return {...state, timeLine: action.payload }\r\n        default:\r\n\t\t\treturn state;\r\n    }\r\n}\r\n\r\nexport default reducer;","const PREFIX = 'COVID_'\r\n\r\nexport const COVID_SUMMARY = PREFIX + 'SELECT';\r\n\r\nexport const COVID_COUNTRYLIST = PREFIX + 'COUNTRY';\r\n\r\nexport const COVID_TIMELINE = PREFIX + 'TIMELINE'","import { combineReducers } from 'redux';\r\nimport covid from '../reducers/covid';\r\n\r\n\r\n\r\n\r\nexport default combineReducers({ \r\n    covid\r\n});","const DOMAIN = 'https://coronavirus-19-api.herokuapp.com/';\r\nconst TIMELINE_DOMAIN = 'https://thevirustracker.com/';\r\nconst TIMELINE_DOMAIN_COUNTRY = 'https://api.thevirustracker.com/';\r\n\r\nexport const COVID_SUMMARY = DOMAIN + 'countries';\r\n\r\nexport const COVID_COUNTRY_NAME = DOMAIN + 'countries/{id}';\r\n\r\nexport const COVID_TIMELINE = TIMELINE_DOMAIN + 'timeline/map-data.json';\r\n\r\nexport const COVID_TIMELINE_COUNTRY = TIMELINE_DOMAIN_COUNTRY + 'free-api?countryTimeline={countryCode}';","import axios from 'axios';\r\nimport * as API from '../constants/api/covid';\r\nimport * as Constants from '../constants/actionType/covid'\r\n\r\n\r\nexport const covidSummary = () => {\r\n    return dispatch => {\r\n        axios\r\n            .get( API.COVID_SUMMARY )\r\n            .then( res => dispatch({ type: Constants.COVID_SUMMARY, payload: res.data }) )  \r\n            .catch( err => console.error( err ) );\r\n    }     \r\n}\r\n\r\nexport const covidCountryList = ( country ) => {\r\n    return dispatch => {\r\n        axios\r\n        .get( API.COVID_COUNTRY_NAME.replace('{id}', country) )\r\n        .then( res => dispatch ({ type: Constants.COVID_COUNTRYLIST, payload: res.data }) )\r\n        .catch( err => console.error( err ) );\r\n    }\r\n}\r\n\r\nexport const covidTimeLine = (countryCode) => {\r\n    return dispatch => {\r\n        axios\r\n        .get( API.COVID_TIMELINE_COUNTRY.replace('{countryCode}',countryCode) )\r\n        .then( res => dispatch ({ type: Constants.COVID_TIMELINE, payload: res.data.timelineitems[0] }) )\r\n        .catch( err => console.error( err ) );\r\n    }\r\n}","export const topTenCountry = [\r\n    { country: 'USA', code: 'US' },\r\n    { country: 'Brazil', code: 'BR' },\r\n    { country: 'Russia', code: 'RU' }, \r\n    { country: 'UK', code: 'GB' },\r\n    { country: 'Italy', code: 'IT' },\r\n    { country: 'France', code: 'FR' },\r\n    { country: 'Germany', code: 'DE' },\r\n    { country: 'India', code: 'IN' },\r\n    { country: 'Iran', code: 'IR' },\r\n    { country: 'Peru', code: 'PE' },\r\n    { country: 'Cananda', code: 'CA' },\r\n    { country: 'China', code: 'CN' },\r\n    { country: 'Mexico', code: 'MX' }\r\n];\r\n\r\nexport const cases = ['New Daily Cases', 'New Daily Deaths', 'Total Recoveries', 'Total Deaths', 'Total Cases'];\r\n\r\nexport const randomColor = () => (\"#\"+((1<<24)*Math.random()|0).toString(16));","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { randomColor } from '../../utilities/data';\r\nimport './style.css';\r\n\r\nclass Global extends PureComponent {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <ul className=\"global numbers\">\r\n                    {\r\n                        this.props.globalData && Object.values(this.props.globalData).map((val, index) =>\r\n                            index !== 0 ? <li key={index} style={{background: randomColor()}}> <p>{Object.keys(this.props.globalData)[index].replace(/([a-z](?=[A-Z]))/g, '$1 ')}</p>  {val.toLocaleString()}</li> : null\r\n                        )\r\n                    }\r\n                </ul>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    globalData: state.covid.globalRecords\r\n});\r\n\r\nexport default connect(mapStateToProps)(Global);","import Global from './Global';\r\nexport default Global;","import React, { useState, useEffect } from 'react';\r\nimport Highcharts from 'highcharts/highstock';\r\nimport HighchartsReact from 'highcharts-react-official';\r\n\r\nfunction BarChart(props) {\r\n\r\n    const [ data, setData ] = useState( null ),\r\n          [ categories, setCategories ] = useState( null );\r\n\r\n    useEffect(() => {\r\n        const handleConsent = () => {\r\n            let myData=[],categoriess=[];\r\n            props.countryRecords.slice(0,15).map((val)=>{\r\n            myData.push([val.cases]);\r\n            return categoriess.push(val.country);\r\n            })\r\n            setData(myData);\r\n            setCategories(categoriess);\r\n        }\r\n        \r\n        handleConsent();\r\n    },[ props.countryRecords ])\r\n\r\n    \r\n    const options = {\r\n        chart: {\r\n            type: 'column'\r\n        },\r\n        title: {\r\n            text: `COVID'19 World count`\r\n        },\r\n        subtitle: {\r\n            text: `Source: <a href=\"https://coronavirus-19-api.herokuapp.com/\" target=\"_blank\">COVID'19</a>`\r\n        },\r\n        xAxis: {\r\n            categories:  categories ,\r\n            title: {\r\n                text: null\r\n            }\r\n        },\r\n        yAxis: {\r\n            min: 0,\r\n            title: {\r\n                text: 'Count ',\r\n                align: 'high'\r\n            },\r\n            labels: {\r\n                overflow: 'justify'\r\n            }\r\n        },\r\n        plotOptions: {\r\n            bar: {\r\n                dataLabels: {\r\n                    enabled: true\r\n                }\r\n            }\r\n        },\r\n        legend: {\r\n            enabled: false\r\n        },\r\n        credits: {\r\n            enabled: false\r\n        },\r\n        series: [{\r\n            colorByPoint: true,\r\n            name: 'Count',\r\n            data: data\r\n        }]\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <HighchartsReact\r\n                highcharts={ Highcharts }\r\n                options={ options } />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BarChart\r\n","import BarChart from './BarChart';\r\nexport default BarChart;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\n\nconst ActivityIndicator = props => {\n\n    let classes = [ 'fa', 'fa-spin', 'fa-spinner' ];\n\n    if( props.small ) classes.push( 'fa-lg' );\n\n    if( props.medium ) classes.push( 'fa-2x' );\n\n    if( props.large ) classes.push( 'fa-3x' );\n\n    return (\n        <div className=\"loading\">\n            <i className={ classes.join( ' ' ) } />\n        </div>\n    )\n};\n\nActivityIndicator.defaultProps = {\n    large: false,\n    medium: false,\n    small: false\n}\n\nActivityIndicator.propTypes = {\n    large: PropTypes.bool,\n    medium: PropTypes.bool,\n    small: PropTypes.bool\n}\n\nexport default ActivityIndicator;","import ActivityIndicator from './ActivityIndicator';\nexport default ActivityIndicator;","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport Highcharts from 'highcharts/highstock';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { covidCountryList } from '../../actions/chart';\r\nimport ActivityIndicator from '../ActivityIndicator';\r\nimport './style.css';\r\n\r\nfunction Pie(props) {\r\n\r\n    const [countryName] = useState(props.countryRecords.map(data => data.country)),\r\n        [option, setSelectedOption] = useState('India'),\r\n        [countryInfo, setCountryInfo] = useState(props.contryDetails),\r\n        [active, setActive] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (!countryInfo) props.covidCountryList('India');\r\n        if (props.contryDetails) handleCountry();\r\n    }, [props.contryDetails]);\r\n\r\n\r\n    const handleCountry = () => {\r\n        let myData = [];\r\n        let keys = Object.keys(props.contryDetails), values = Object.values(props.contryDetails);\r\n        keys.forEach((data) => myData.push({ name: data }));\r\n        values.forEach((data, index) => myData[index].y = data);\r\n        myData.shift();\r\n        setCountryInfo(myData)\r\n        setActive(false)\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setSelectedOption(e.target.value);\r\n        props.covidCountryList(e.target.value);\r\n        setActive(true);\r\n    }\r\n\r\n    const options = {\r\n        chart: {\r\n            type: 'pie'\r\n        },\r\n        title: {\r\n            text: `${option} Records`\r\n        },\r\n        tooltip: {\r\n            pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\r\n        },\r\n        accessibility: {\r\n            point: {\r\n                valueSuffix: '%'\r\n            }\r\n        },\r\n        plotOptions: {\r\n            pie: {\r\n                allowPointSelect: true,\r\n                cursor: 'pointer',\r\n                dataLabels: {\r\n                    enabled: true,\r\n                    format: '<b>{point.name}</b>: {point.percentage:.1f} %'\r\n                }\r\n            }\r\n        },\r\n        series: [{\r\n            name: 'Brands',\r\n            colorByPoint: true,\r\n            data: countryInfo\r\n\r\n        }]\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <label htmlFor=\"country\">Please select a country:</label>\r\n            <select name=\"country\" id=\"country\" onChange={handleChange} defaultValue={'India'} className=\"form-control col-md-4\">\r\n                {\r\n                    countryName.map((val, index) =>\r\n                        <option value={val}\r\n                            key={index}\r\n                        >{val}</option>\r\n                    )\r\n                }\r\n\r\n            </select>\r\n            {active ? <ActivityIndicator medium /> :\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={options} />\r\n            }\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    countryRecords: state.covid.countryRecords,\r\n    contryDetails: state.covid.countryInfo\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({ covidCountryList }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Pie);\r\n","import Pie from './Pie';\r\nexport default Pie;","import React, { useState } from 'react';\r\nimport './style.css';\r\n\r\nfunction Search(props) {\r\n\r\n    const [country, setCountry] = useState(null);\r\n\r\n    const handleChange = (e) => {\r\n        let values = props.countryRecords.filter((data) => {\r\n            if ( data.country.toUpperCase().indexOf(e.target.value.toUpperCase()) !== -1 ) return data;\r\n        });\r\n        setCountry(values);\r\n    }\r\n\r\n    return (\r\n        <div className=\"search content\">\r\n            <h2>COVID'19 by Country</h2>\r\n            <input type=\"text\" placeholder=\"Type to search\" onChange={handleChange} className=\"form-control\" />\r\n            <ul className=\"search\">\r\n                {\r\n                    country ? country.length !== 0 ? country.slice(0, 5).map((values, index) =>\r\n                        <li key={index}>\r\n                            <h3>{values.country}</h3>\r\n                    Cases: {values.cases} | Active: {values.active} | Deaths: {values.deaths} <br />\r\n                    Recovered: {values.recovered} | Total Tests: {values.totalTests} | Today Deaths: {values.todayDeaths} <br></br>\r\n                        </li>\r\n                    ) :\r\n                        <h3>Search result not found</h3>\r\n                        :\r\n                        props.countryRecords.slice(0, 5).map((values, index) =>\r\n                            <li key={index}>\r\n                                <h3>{values.country}</h3>\r\n                    Cases: {values.cases} | Active: {values.active} | Deaths: {values.deaths} <br />\r\n                    Recovered: {values.recovered} | Total Tests: {values.totalTests} | Today Deaths: {values.todayDeaths} <br></br>\r\n                            </li>)\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import Search from './Search';\r\nexport default Search;","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport Highcharts from 'highcharts/highstock';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport { covidTimeLine } from '../../actions/chart';\r\nimport { topTenCountry, cases } from '../../utilities/data';\r\nimport ActivityIndicator from '../ActivityIndicator';\r\nimport './style.css';\r\n\r\nfunction Line(props) {\r\n\r\n    const [categories, setCategories] = useState(null),\r\n        [series, setSeries] = useState(null),\r\n        [option, setSelectedOption] = useState('IN'),\r\n        [active, setActive] = useState(false)\r\n\r\n    useEffect(() => {\r\n\r\n        if (!props.timeLineRecords) props.covidTimeLine('IN');\r\n        if (props.timeLineRecords) handleCountry();\r\n\r\n    }, [props.timeLineRecords]);\r\n\r\n    const handleCountry = () => {\r\n        let keys = Object.keys(props.timeLineRecords), values = Object.values(props.timeLineRecords),\r\n            series = [];\r\n        keys.pop(); values.pop();\r\n        values.map((val, index) => {\r\n            val.date = keys[index];\r\n        });\r\n\r\n        const grouped = groupBy(values, value => value.date);\r\n\r\n        cases.forEach((data) => series.push({ name: data, data: [] }));\r\n\r\n        grouped.forEach((data, i) => {\r\n            series[0].data.push(data[0].new_daily_cases);\r\n            series[1].data.push(data[0].new_daily_deaths);\r\n            series[2].data.push(data[0].total_recoveries);\r\n            series[3].data.push(data[0].total_deaths);\r\n            series[4].data.push(data[0].total_cases)\r\n        })\r\n        setSeries(series);\r\n        setCategories(keys);\r\n        setActive(true)\r\n    }\r\n\r\n    const groupBy = (list, keyGetter) => {\r\n        const map = new Map();\r\n        list.forEach((item) => {\r\n            const key = keyGetter(item);\r\n            const collection = map.get(key);\r\n            if (!collection) {\r\n                map.set(key, [item]);\r\n            } else {\r\n                collection.push(item);\r\n            }\r\n        });\r\n        return map;\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setActive(false)\r\n        props.covidTimeLine(e.target.value);\r\n        setSelectedOption(e.target.value);\r\n    }\r\n\r\n    const options = {\r\n        title: {\r\n            text: `${option} Daily counts`\r\n        },\r\n        yAxis: {\r\n            title: {\r\n                text: 'Number of Counts'\r\n            }\r\n        },\r\n\r\n        xAxis: {\r\n            accessibility: {\r\n                rangeDescription: 'Range: 2010 to 2017'\r\n            },\r\n            categories: categories\r\n        },\r\n\r\n        legend: {\r\n            layout: 'vertical',\r\n            align: 'right',\r\n            verticalAlign: 'middle'\r\n        },\r\n\r\n        plotOptions: {\r\n            series: {\r\n                label: {\r\n                    connectorAllowed: false\r\n                }\r\n            }\r\n        },\r\n\r\n        series: series,\r\n        responsive: {\r\n            rules: [{\r\n                condition: {\r\n                    maxWidth: 500\r\n                },\r\n                chartOptions: {\r\n                    legend: {\r\n                        layout: 'horizontal',\r\n                        align: 'center',\r\n                        verticalAlign: 'bottom'\r\n                    }\r\n                }\r\n            }]\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"line chart\">\r\n\r\n            <label className=\"labels country\" htmlFor=\"country\">Please select a country:</label>\r\n            <select name=\"country\" id=\"country\" onChange={handleChange} defaultValue={'IN'} className=\"form-control col-md-2 col-xs-12\">\r\n                {\r\n                    topTenCountry.map((val, index) =>\r\n                        <option value={val.code}\r\n                            key={index}\r\n                            data-value={val.country}\r\n                        >{val.country}</option>\r\n                    )\r\n                }\r\n\r\n            </select>\r\n            {!active ? <ActivityIndicator medium /> :\r\n                <HighchartsReact\r\n                    highcharts={Highcharts}\r\n                    options={options} />\r\n\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    timeLineRecords: state.covid.timeLine\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({ covidTimeLine }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Line);\r\n","import Line from './Line';\r\nexport default Line;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { covidSummary } from './actions/chart';\r\nimport Global from './components/Global';\r\nimport BarChart from './components/Bar';\r\nimport Pie from './components/Pie';\r\nimport Search from './components/Search';\r\nimport Line from './components/Line';\r\nimport ActivityIndicator from './components/ActivityIndicator';\r\nimport './App.css';\r\n\r\nfunction App(props) {\r\n\r\n  useEffect(() => {\r\n    if (!props.countryRecords) props.covidSummary();\r\n  })\r\n\r\n  const handleDateFormat = (dateObj) => {\r\n    return dateObj.split('2020')[0];\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"header name\">\r\n        <h2>COVID'19 Latest Updates</h2>\r\n      </header>\r\n      {\r\n        (!props.countryRecords) ? <ActivityIndicator large /> :\r\n          <div className=\"body content\">\r\n            <p className=\"date\">{handleDateFormat(Date())}</p>\r\n            <Global />\r\n            <Search countryRecords={props.countryRecords} />\r\n            <Line />\r\n            <div className=\"row chart section\">\r\n              <div className=\"col-md-6\">\r\n                <BarChart countryRecords={props.countryRecords} />\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <Pie />\r\n              </div>\r\n            </div>\r\n          </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  countryRecords: state.covid.countryRecords\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({ covidSummary }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from './reducers';\nimport ReduxThunk from 'redux-thunk';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst enhancers = compose( \n  applyMiddleware( ...[ ReduxThunk ]), \n  window.devToolsExtension\n    ? window.devToolsExtension()\n      : f => f\n),\nstore = createStore( reducers, enhancers ),\napp = document.getElementById( 'root' );\nif( app ){\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App />\n    </Provider>,\n  app\n);\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}